#**********************************
# This file is part of Scheherazade font family (http://software.sil.org/scheherazade/) 
# and is Copyright (c) 2020 SIL International (http://www.sil.org/),
# with Reserved Font Names "Scheherazade" and "SIL".
#
# This Font Software is licensed under the SIL Open Font License, Version 1.1.
#
# You should have received a copy of the license along with this Font Software.
# If this is not the case, go to (http://scripts.sil.org/OFL) for all the
# details including an FAQ.
#**********************************


#**********************************
#  Language Systems
#**********************************

languagesystem arab dflt ;
languagesystem arab KUR  ;
languagesystem arab SND  ;
languagesystem arab URD  ;
languagesystem latn dflt ;


#**********************************
#  Substitution Lookups
#**********************************

lookup SmallMaddah {
  lookupflag 0 ;
    sub @Maddah by @Maddah.small ;
} SmallMaddah;

lookup DecomposeForColor {
  lookupflag 0 ;
    sub @AlefPlusMark by absAlef @AlefMark ;
} DecomposeForColor;

lookup FontCheck1_target {
  lookupflag IgnoreMarks ;
    sub U n k n o w n by O ;
} FontCheck1_target ;

lookup FontCheck1 {
  lookupflag IgnoreMarks ;
    sub [ R ]e n d e r i n g U' lookup FontCheck1_target n'  k'  n'  o'  w'  n'  ;
} FontCheck1;

lookup FontCheck2_target {
  lookupflag IgnoreMarks ;
    sub O by O p e n T y p e ;
} FontCheck2_target ;

lookup FontCheck2 {
  lookupflag IgnoreMarks ;
    sub [ R ]e n d e r i n g O' lookup FontCheck2_target ;
} FontCheck2;

lookup Mirror {
  lookupflag IgnoreMarks ;
    sub radical by radical.rtl ;
} Mirror;

lookup ltrFina {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol by @DualLinkFina ;
    sub @RightLinkIsol by @RightLinkFina ;
} ltrFina;

lookup ltrMedi {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol by @DualLinkMedi ;
} ltrMedi;

lookup ltrInit {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol by @DualLinkInit ;
} ltrInit;

lookup Ligatures_Part1_target {
  lookupflag IgnoreMarks ;
    sub @LamIni by @LamIniBeforeAlef ;
    sub @LamMed by @LamMedBeforeAlef ;
} Ligatures_Part1_target ;

lookup Ligatures_Part2a_target {
  lookupflag IgnoreMarks ;
    sub @AlefFin by @AlefFinAfterLamIni ;
} Ligatures_Part2a_target ;

lookup Ligatures_Part2b_target {
  lookupflag IgnoreMarks ;
    sub @AlefFin by @AlefFinAfterLamMed ;
} Ligatures_Part2b_target ;

lookup Ligatures {
  lookupflag IgnoreMarks ;
  # Subtable: Ligatures\Part1
    sub [ @LamIni @LamMed ]' lookup Ligatures_Part1_target @AlefFin ;
  # Subtable: Ligatures\Part2a
    sub @LamIniBeforeAlef @AlefFin' lookup Ligatures_Part2a_target ;
  # Subtable: Ligatures\Part2b
    sub @LamMedBeforeAlef @AlefFin' lookup Ligatures_Part2b_target ;
} Ligatures;

lookup ShaddaLigatures {
  lookupflag MarkAttachmentType @ShaddaLigatureParts ;
    sub absShadda @ShaddaMarks by @ShaddaLigatures ;
    sub @ShaddaMarks absShadda by @ShaddaLigatures ;
} ShaddaLigatures;

lookup ShaddaKasraLigatures {
  lookupflag MarkAttachmentType @ShaddaLigatureParts ;
    sub @ShaddaKasraMarks absShadda by @ShaddaKasraLigatures ;
    sub absShadda @ShaddaKasraMarks by @ShaddaKasraLigatures ;
} ShaddaKasraLigatures;

lookup ComposeLowHamzaAbove {
  lookupflag UseMarkFilteringSet @HamzaAbove ;
    sub @LowHamzaBase absHamzaAbove by @LowHamzaComposed ;
} ComposeLowHamzaAbove;

lookup HamzaLigatures {
  lookupflag UseMarkFilteringSet @HamzaLigatureParts ;
    sub absHamzaAbove @HamzaMarks by @HamzaLigatures ;
    sub @HamzaMarks absHamzaAbove by @HamzaLigatures ;
} HamzaLigatures;

lookup SindhiCALT {
  lookupflag 0 ;
    sub absHehMed by absHehMed.knottedHigh ;
    sub absHehFin by absHehFin.knottedHigh ;
    sub absHeh by absHeh.knotted ;
    sub absEasternSix by absEasternSix.urdu ;
    sub absEasternSeven by absEasternSeven.urdu ;
    sub absDammatan by absDammatan.sixNine ;
    sub @Meem by @Meem.sindhi ;
} SindhiCALT;

lookup UrduCALT {
  lookupflag IgnoreMarks ;
    sub absEasternFour by absEasternFour.urdu ;
    sub absEasternSix by absEasternSix.urdu ;
    sub absEasternSeven by absEasternSeven.urdu ;
    sub absHehIni by absHehIni.hooked ;
    sub absHehMed by absHehMed.hooked ;
    sub absHehFin by absHehFin.hooked ;
} UrduCALT;

lookup SignWith_4digits_target {
  lookupflag IgnoreMarks ;
    sub absYearSign by absYearSign.4 ;
    sub absSamvatSign by absSamvatSign.4 ;
    sub absNumberSignAbove by absNumberSignAbove.4 ;
    sub absPageSign by absPageSign.4 ;
} SignWith_4digits_target ;

lookup SignWith_3digits_target {
  lookupflag IgnoreMarks ;
    sub absNumberSign by absNumberSign.3 ;
    sub absYearSign by absYearSign.3 ;
    sub absSamvatSign by absSamvatSign.3 ;
    sub absPageSign by absPageSign.3 ;
    sub absEndOfAyah by absEndOfAyah.3 ;
    sub absEndOfAyah.alt by absEndOfAyah.alt.3 ;
    sub absEndOfAyah.altB by absEndOfAyah.altB.3 ;
    sub absNumberSignAbove by absNumberSignAbove.3 ;
} SignWith_3digits_target ;

lookup SignWith_2digits_target {
  lookupflag IgnoreMarks ;
    sub absNumberSign by absNumberSign.2 ;
    sub absYearSign by absYearSign.2 ;
    sub absSamvatSign by absSamvatSign.2 ;
    sub absFootnoteSign by absFootnoteSign.2 ;
    sub absPageSign by absPageSign.2 ;
    sub absEndOfAyah by absEndOfAyah.2 ;
    sub absEndOfAyah.alt by absEndOfAyah.alt.2 ;
    sub absEndOfAyah.altB by absEndOfAyah.altB.2 ;
    sub absNumberSignAbove by absNumberSignAbove.2 ;
} SignWith_2digits_target ;

lookup SignWith {
  lookupflag IgnoreMarks ;
  # Subtable: SignWith\4digits
    sub [ absYearSign absSamvatSign absNumberSignAbove absPageSign ]' lookup SignWith_4digits_target @DigitsAny @DigitsAny @DigitsAny @DigitsAny ;
    sub @DigitsAny @DigitsAny @DigitsAny @DigitsAny [ absYearSign absSamvatSign absNumberSignAbove absPageSign ]' lookup SignWith_4digits_target ;
  # Subtable: SignWith\3digits
    sub [ absNumberSign absYearSign absSamvatSign absPageSign absEndOfAyah absEndOfAyah.alt absEndOfAyah.altB absNumberSignAbove ]' lookup SignWith_3digits_target @DigitsAny @DigitsAny @DigitsAny ;
    sub @DigitsAny @DigitsAny @DigitsAny [ absNumberSign absYearSign absSamvatSign absPageSign absEndOfAyah absEndOfAyah.alt absEndOfAyah.altB absNumberSignAbove ]' lookup SignWith_3digits_target ;
  # Subtable: SignWith\2digits
    sub [ absNumberSign absYearSign absSamvatSign absFootnoteSign absPageSign absEndOfAyah absEndOfAyah.alt absEndOfAyah.altB absNumberSignAbove ]' lookup SignWith_2digits_target @DigitsAny @DigitsAny ;
    sub @DigitsAny @DigitsAny [ absNumberSign absYearSign absSamvatSign absFootnoteSign absPageSign absEndOfAyah absEndOfAyah.alt absEndOfAyah.altB absNumberSignAbove ]' lookup SignWith_2digits_target ;
} SignWith;

lookup SignDigits_ToMedium_target {
  lookupflag IgnoreMarks ;
    sub @DigitsAny by @DigitsAnyMedium ;
} SignDigits_ToMedium_target ;

lookup SignDigits_ToSmall_target {
  lookupflag IgnoreMarks ;
    sub @DigitsAny by @DigitsAnySmall ;
} SignDigits_ToSmall_target ;

lookup SignDigits {
  lookupflag IgnoreMarks ;
  # Subtable: SignDigits\ToMedium
    sub @DigitsAnyMedium @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub @TakesMediumDigits @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @TakesMediumDigits ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny @TakesMediumDigits ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny @DigitsAny @TakesMediumDigits ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny @DigitsAny @DigitsAny @TakesMediumDigits ;
  # Subtable: SignDigits\ToSmall
    sub @DigitsAnySmall @DigitsAny' lookup SignDigits_ToSmall_target ;
    sub @TakesSmallDigits @DigitsAny' lookup SignDigits_ToSmall_target ;
    sub @DigitsAny' lookup SignDigits_ToSmall_target @TakesSmallDigits ;
    sub @DigitsAny' lookup SignDigits_ToSmall_target @DigitsEastern @TakesSmallDigits ;
    sub @DigitsAny' lookup SignDigits_ToSmall_target @DigitsEastern @DigitsEastern @TakesSmallDigits ;
    sub @DigitsAny' lookup SignDigits_ToSmall_target @DigitsEastern @DigitsEastern @DigitsEastern @TakesSmallDigits ;
} SignDigits;

lookup MaddaVowel1_target {
  lookupflag 0 ;
    sub @MarkGroup1A by @MarkGroup1A absMaddahAbove.small ;
    sub @MarkGroup2A by @MarkGroup2A absMaddahAbove.small ;
    sub @MarkGroup3A by @MarkGroup3A absMaddahAbove.small ;
} MaddaVowel1_target ;

lookup MaddaVowel1 {
  lookupflag 0 ;
    sub absMaddahAbove.small [ @MarkGroup1A @MarkGroup2A @MarkGroup3A ]' lookup MaddaVowel1_target ;
} MaddaVowel1;

lookup MaddaVowel2_target {
  lookupflag 0 ;
    sub absMaddahAbove.small @MarkGroup1A by @MarkGroup1A ;
    sub absMaddahAbove.small @MarkGroup2A by @MarkGroup2A ;
    sub absMaddahAbove.small @MarkGroup3A by @MarkGroup3A ;
} MaddaVowel2_target ;

lookup MaddaVowel2 {
  lookupflag 0 ;
    sub absMaddahAbove.small' lookup MaddaVowel2_target [ @MarkGroup1A @MarkGroup2A @MarkGroup3A ]'  absMaddahAbove.small ;
} MaddaVowel2;

lookup SindhiHeh {
  lookupflag IgnoreMarks ;
  # Used only by TypeTuner
    sub absHehMed by absHehMed.knottedHigh ;
    sub absHehFin by absHehFin.knottedHigh ;
    sub absHeh by absHeh.knotted ;
} SindhiHeh;

lookup KurdishHeh {
  lookupflag IgnoreMarks ;
  # Used only by TypeTuner
    sub absHehFin by absHehFin.knottedHigh ;
    sub absHeh by absHeh.knotted ;
} KurdishHeh;

lookup UrduHeh {
  lookupflag IgnoreMarks ;
  # Used only by TypeTuner
    sub absHehIni by absHehIni.hooked ;
    sub absHehMed by absHehMed.hooked ;
    sub absHehFin by absHehFin.hooked ;
} UrduHeh;

lookup AyahAlternates {
  lookupflag 0 ;
    sub absEndOfAyah from [ absEndOfAyah.alt absEndOfAyah.altB ] ;
    sub absEndOfAyah.2 from [ absEndOfAyah.alt.2 absEndOfAyah.altB.2 ] ;
    sub absEndOfAyah.3 from [ absEndOfAyah.alt.3 absEndOfAyah.altB.3 ] ;
} AyahAlternates;

lookup DalAlternates {
  lookupflag IgnoreMarks ;
    sub @DalIso by @DalIso.sen ;
} DalAlternates;

lookup MeemAlternates {
  lookupflag IgnoreMarks ;
    sub @Meem by @Meem.sindhi ;
} MeemAlternates;

lookup HehAlternates {
  lookupflag IgnoreMarks ;
  # 0=Sindhi; 1=Urdu; 1=Kurdish
    sub absHeh from [ absHeh.knotted absHeh absHeh.knotted ] ;
    sub absHehFin from [ absHehFin.knottedHigh absHehFin.hooked absHehFin.knottedHigh ] ;
    sub absHehIni from [ absHehIni absHehIni.hooked absHehIni ] ;
    sub absHehMed from [ absHehMed.knottedHigh absHehMed.hooked absHehMed ] ;
} HehAlternates;

lookup ArabicUAlternates {
  lookupflag IgnoreMarks ;
    sub @U by @U.filled ;
} ArabicUAlternates;

lookup KasraLowered {
  lookupflag 0 ;
  # This is a hack since it is being used in a cvxx lookup, but this is about the only way to do this task.
    sub @ShaddaKasraLigatures by absShadda @ShaddaKasraMarks ;
} KasraLowered;

lookup DammaAlternates {
  lookupflag 0 ;
    sub absDamma from [ absDamma.filled absDamma.short ] ;
    sub absHamzaDamma from [ absHamzaDamma.filled absHamzaDamma.short ] ;
    sub absShaddaDamma from [ absShaddaDamma.filled absShaddaDamma.short ] ;
} DammaAlternates;

lookup DammatanAlternates {
  lookupflag 0 ;
    sub @Dammatan by @Dammatan.sixNine ;
} DammatanAlternates;

lookup MaddahAlternates {
  lookupflag 0 ;
    sub @Maddah.small by @Maddah ;
} MaddahAlternates;

lookup UltapeshAlternates {
  lookupflag 0 ;
    sub absUltaPesh by absUltaPesh.open ;
} UltapeshAlternates;

lookup DaggerAlefToLarge_target {
  lookupflag 0 ;
    sub absSuperscriptAlef by absSuperscriptAlef.large ;
} DaggerAlefToLarge_target ;

lookup DaggerAlefToLarge {
  lookupflag 0 ;
    sub @TakesLargeDaggerAlef absSuperscriptAlef' lookup DaggerAlefToLarge_target ;
} DaggerAlefToLarge;

lookup SukunAlternates {
  lookupflag 0 ;
    sub absSukun from [ absSukun.downOpen absSukun.leftOpen ] ;
} SukunAlternates;

lookup EasternDigitAlternates {
  lookupflag 0 ;
    sub absEasternFour from [ absEasternFour absEasternFour.urdu absEasternFour absEasternFour.roh ] ;
    sub absEasternFourMedium from [ absEasternFourMedium absEasternFourMedium.urdu absEasternFourMedium absEasternFourMedium.roh ] ;
    sub absEasternFourSmall from [ absEasternFourSmall absEasternFourSmall.urdu absEasternFourSmall absEasternFourSmall.roh ] ;
    sub absEasternSeven from [ absEasternSeven.urdu absEasternSeven.urdu absEasternSeven absEasternSeven.urdu ] ;
    sub absEasternSevenMedium from [ absEasternSevenMedium.urdu absEasternSevenMedium.urdu absEasternSevenMedium absEasternSevenMedium.urdu ] ;
    sub absEasternSevenSmall from [ absEasternSevenSmall.urdu absEasternSevenSmall.urdu absEasternSevenSmall absEasternSevenSmall.urdu ] ;
    sub absEasternSix from [ absEasternSix.urdu absEasternSix.urdu absEasternSix absEasternSix.urdu ] ;
    sub absEasternSixMedium from [ absEasternSixMedium.urdu absEasternSixMedium.urdu absEasternSixMedium absEasternSixMedium.urdu ] ;
    sub absEasternSixSmall from [ absEasternSixSmall.urdu absEasternSixSmall.urdu absEasternSixSmall absEasternSixSmall.urdu ] ;
} EasternDigitAlternates;

lookup CommaAlternates {
  lookupflag IgnoreMarks ;
    sub absComma by absComma.downward ;
    sub absSemicolon by absSemicolon.downward ;
} CommaAlternates;

lookup JehHack {
  lookupflag IgnoreMarks ;
    sub @Jeh by @Jeh.dotHat ;
} JehHack;

lookup HeadOfKhahHack {
  lookupflag 0 ;
    sub absSmallHighDotlessHeadOfKhah by absShortVowelMark ;
} HeadOfKhahHack;


#**********************************
#  Positioning Lookups
#**********************************

lookup LamAlefConnection {
	lookupflag IgnoreMarks RightToLeft;
  pos cursive @entry @exit;
} LamAlefConnection;

lookup mark_to_base {
  lookupflag 0;
  pos base @diaA mark @_diaA;
  pos base @diaB mark @_diaB;
} mark_to_base;

lookup alef_to_base {
  lookupflag 0;
  pos base @alef mark @_alef;
} alef_to_base;

lookup mark2_to_base {
  lookupflag 0;
  pos base @dia2B mark @_diaB;
} mark2_to_base;

@MarkFilter_diaA = [@diaA_MarkBase @_diaA];
lookup mark_to_mark_above {
  lookupflag UseMarkFilteringSet @MarkFilter_diaA;
  pos mark @diaA_MarkBase mark @_diaA;
} mark_to_mark_above;

@MarkFilter_diaB = [@diaB_MarkBase @_diaB];
lookup mark_to_mark_below {
  lookupflag UseMarkFilteringSet @MarkFilter_diaB;
  pos mark @diaB_MarkBase mark @_diaB;
} mark_to_mark_below;


# Subtending mark positioning

lookup SubtendingMarks {
  lookupflag IgnoreMarks ;
    # This code is taken from Harmattan.
    # In Graphite we use mark attachment rules. However, in OpenType positioning digits on 
    # subtending marks has to be done with adjustments rather than attachment since for some 
    # engines the digits will ordered *before* the subtending mark.
    
    # Additionally, the adjustment value records depend on font face (bold vs regular). Therefore
    # we use feax extentions to calculate the value records based on glyph advancewidths and digit AP coordinates.
    
    # In each "do" template, the first rule is ordered for Uniscribe or HarfBuzz 'latin', the second for HarfBuzz 'arab'
    
    # U+06DD End of Ayah
    do let w = -ADVx("absZeroSmall"); let x1 = APx("absEndOfAyah.3", "digitR") - ADVx("absEndOfAyah.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos @AyahAny @DigitsAnySmall' <$x1 0 $w 0>   @DigitsAnySmall' <$x2 0 $w 0>   @DigitsAnySmall' <$x3 0 $w 0> ;
        pos          @DigitsAnySmall' <$x3 0 $w 0>   @DigitsAnySmall' <$x2 0 $w 0>   @DigitsAnySmall' <$x1 0 $w 0>  @AyahAny ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absEndOfAyah.2", "digitR") - ADVx("absEndOfAyah.2"); let x2 = x1 - w; 
    {
        pos @AyahAny @DigitsAnyMedium' <$x1 0 $w 0>  @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos          @DigitsAnyMedium' <$x2 0 $w 0>  @DigitsAnyMedium' <$x1 0 $w 0>  @AyahAny ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absEndOfAyah", "digitR") - ADVx("absEndOfAyah");
    {
        pos @AyahAny @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos          @DigitsAnyMedium' <$x1 0 $w 0> @AyahAny ;
    }

    # U+0600 Number sign
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absNumberSign.3", "digitR") - ADVx("absNumberSign.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos absNumberSign.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absNumberSign.3 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absNumberSign.2", "digitR") - ADVx("absNumberSign.2"); let x2 = x1 - w;
    {
        pos absNumberSign.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absNumberSign.2 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absNumberSign", "digitR") - ADVx("absNumberSign"); 
    {
        pos absNumberSign   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x1 0 $w 0> absNumberSign ;
    }
    
    # U+0601 Year sign
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absYearSign.4", "digitR") - ADVx("absYearSign.4"); let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos absYearSign.4 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x4 0 $w 0> ;
        pos           @DigitsAnyMedium' <$x4 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absYearSign.4 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absYearSign.3", "digitR") - ADVx("absYearSign.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos absYearSign.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos           @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absYearSign.3 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absYearSign.2", "digitR") - ADVx("absYearSign.2"); let x2 = x1 - w;
    {
        pos absYearSign.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos           @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absYearSign.2 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absYearSign", "digitR") - ADVx("absYearSign"); 
    {
        pos absYearSign   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos           @DigitsAnyMedium' <$x1 0 $w 0> absYearSign ;
    }
    
    # U+0602 Footnote Marker
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absFootnoteSign.2", "digitR") - ADVx("absFootnoteSign.2"); let x2 = x1 - w;
    {
        pos absFootnoteSign.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos                     @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absFootnoteSign.2 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absFootnoteSign", "digitR") - ADVx("absFootnoteSign"); 
    {
        pos absFootnoteSign   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos                     @DigitsAnyMedium' <$x1 0 $w 0> absFootnoteSign ;
    }
    
    # U+0603 Page Number
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absPageSign.4", "digitR") - ADVx("absPageSign.4"); let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos absPageSign.4 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x4 0 $w 0>;
        pos                 @DigitsAnyMedium' <$x4 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absPageSign.4 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absPageSign.3", "digitR") - ADVx("absPageSign.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos absPageSign.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absPageSign.3 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absPageSign.2", "digitR") - ADVx("absPageSign.2"); let x2 = x1 - w;
    {
        pos absPageSign.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absPageSign.2 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absPageSign", "digitR") - ADVx("absPageSign"); 
    {
        pos absPageSign   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x1 0 $w 0> absPageSign ;
    }
    
    # U+0604 Samvat sign
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absSamvatSign.4", "digitR") - ADVx("absSamvatSign.4"); let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos absSamvatSign.4 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x4 0 $w 0>;
        pos             @DigitsAnyMedium' <$x4 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absSamvatSign.4 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absSamvatSign.3", "digitR") - ADVx("absSamvatSign.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos absSamvatSign.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absSamvatSign.3 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absSamvatSign.2", "digitR") - ADVx("absSamvatSign.2"); let x2 = x1 - w;
    {
        pos absSamvatSign.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absSamvatSign.2 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absSamvatSign", "digitR") - ADVx("absSamvatSign"); 
    {
        pos absSamvatSign   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x1 0 $w 0> absSamvatSign ;
    }
    
    # U+0605 Number mark
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absNumberSignAbove.4", "digitR") - ADVx("absNumberSignAbove.4"); let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos absNumberSignAbove.4 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x4 0 $w 0>;
        pos                 @DigitsAnyMedium' <$x4 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absNumberSignAbove.4 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absNumberSignAbove.3", "digitR") - ADVx("absNumberSignAbove.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos absNumberSignAbove.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absNumberSignAbove.3 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absNumberSignAbove.2", "digitR") - ADVx("absNumberSignAbove.2"); let x2 = x1 - w;
    {
        pos absNumberSignAbove.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> absNumberSignAbove.2 ;
    }
    do let w = -ADVx("absZeroMedium"); let x1 = APx("absNumberSignAbove", "digitR") - ADVx("absNumberSignAbove"); 
    {
        pos absNumberSignAbove   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x1 0 $w 0> absNumberSignAbove ;
    }

} SubtendingMarks;


#**********************************
#  FEATURES
#**********************************

#--- Substitution

feature init {  # Initial Forms
    script arab;  # Arabic
      lookup ltrInit;
} init ;

feature medi {  # Medial Forms
    script arab;  # Arabic
      lookup ltrMedi;
} medi ;

feature fina {  # Terminal Forms
    script arab;  # Arabic
      lookup ltrFina;
} fina ;


feature calt {  # Contextual Alternates
    script arab;  # Arabic
        language dflt;  # Default
            lookup SignWith;
            lookup SignDigits;
            lookup MaddaVowel1;
            lookup MaddaVowel2;
        language KUR  exclude_dflt;  # Kurdish
            lookup SignWith;
            lookup SignDigits;
            lookup MaddaVowel1;
            lookup MaddaVowel2;
            lookup KurdishHeh;
        language SND  exclude_dflt;  # Sindhi
            lookup SindhiCALT;
            lookup SignWith;
            lookup SignDigits;
            lookup MaddaVowel1;
            lookup MaddaVowel2;
        language URD  exclude_dflt;  # Urdu
            lookup UrduCALT;
            lookup SignWith;
            lookup SignDigits;
            lookup MaddaVowel1;
            lookup MaddaVowel2;
    script latn;  # Latin
        language dflt;  # Default
            lookup SignWith;
            lookup SignDigits;
} calt ;

feature ccmp {  # Glyph Composition/Decomposition
    script arab;  # Arabic
        language dflt;  # Default
            lookup SmallMaddah;
            lookup DecomposeForColor;
            lookup FontCheck1;
            lookup FontCheck2;
        language KUR  exclude_dflt;  # Kurdish
            lookup SmallMaddah;
            lookup DecomposeForColor;
            lookup FontCheck1;
            lookup FontCheck2;
        language SND  exclude_dflt;  # Sindhi
            lookup SmallMaddah;
            lookup DecomposeForColor;
            lookup FontCheck1;
            lookup FontCheck2;
        language URD  exclude_dflt;  # Urdu
            lookup SmallMaddah;
            lookup DecomposeForColor;
            lookup FontCheck1;
            lookup FontCheck2;
    script latn;  # Latin
        language dflt;  # Default
            lookup SmallMaddah;
            lookup FontCheck1;
            lookup FontCheck2;
} ccmp ;

feature cv12 {  # Character Variant 12
    script arab;  # Arabic
      lookup DalAlternates;
} cv12 ;

feature cv44 {  # Character Variant 44
    script arab;  # Arabic
        language dflt;  # Default
            lookup MeemAlternates;
        language KUR  exclude_dflt;  # Kurdish
            lookup MeemAlternates;
        language URD  exclude_dflt;  # Urdu
            lookup MeemAlternates;
} cv44 ;

feature cv48 {  # Character Variant 48
    script arab;  # Arabic
        language dflt;  # Default
            lookup HehAlternates;
} cv48 ;

feature cv50 {  # Character Variant 50
    script arab;  # Arabic
      lookup ArabicUAlternates;
} cv50 ;

feature cv60 {  # Character Variant 60
		lookup MaddahAlternates;
} cv60 ;

feature cv62 {  # Character Variant 62
    script arab;  # Arabic
        language dflt;  # Default
            lookup KasraLowered;
        language KUR  exclude_dflt;  # Kurdish
            lookup KasraLowered;
    script latn;  # Latin
        language dflt;  # Default
            lookup KasraLowered;
} cv62 ;

feature cv70 {  # Character Variant 70
		lookup DammaAlternates;
} cv70 ;

feature cv72 {  # Character Variant 72
		lookup DammatanAlternates;
} cv72 ;

feature cv74 {  # Character Variant 74
		lookup UltapeshAlternates;
} cv74 ;

feature cv76 {  # Character Variant 76
		lookup DaggerAlefToLarge;
} cv76 ;

feature cv78 {  # Character Variant 78
		lookup SukunAlternates;
} cv78 ;

feature cv80 {  # Character Variant 80
		lookup AyahAlternates;
} cv80 ;

feature cv82 {  # Character Variant 82
    script arab;  # Arabic
        language dflt;  # Default
            lookup EasternDigitAlternates;
        language KUR  exclude_dflt;  # Kurdish
            lookup EasternDigitAlternates;
} cv82 ;

feature cv84 {  # Character Variant 84
		lookup CommaAlternates;
} cv84 ;

feature cv90 {  # Character Variant 90
		lookup JehHack;
} cv90 ;

feature cv92 {  # Character Variant 92
		lookup HeadOfKhahHack;
} cv92 ;

feature rlig {  # Required Ligatures
    script arab;  # Arabic
        language dflt;  # Default
            lookup Ligatures;
            lookup ShaddaLigatures;
            lookup ShaddaKasraLigatures;
            lookup ComposeLowHamzaAbove;
            lookup HamzaLigatures;
        language KUR  exclude_dflt;  # Kurdish
            lookup Ligatures;
            lookup ShaddaLigatures;
            lookup ShaddaKasraLigatures;
            lookup ComposeLowHamzaAbove;
            lookup HamzaLigatures;
        language SND  exclude_dflt;  # Sindhi
            lookup Ligatures;
            lookup ShaddaLigatures;
            lookup ComposeLowHamzaAbove;
            lookup HamzaLigatures;
        language URD  exclude_dflt;  # Urdu
            lookup Ligatures;
            lookup ShaddaLigatures;
            lookup ComposeLowHamzaAbove;
            lookup HamzaLigatures;
} rlig ;

feature rtlm {  # Right-To-Left Mirrored Forms
		lookup Mirror;
} rtlm ;

feature salt {  # Stylistic Alternates
    script arab;  # Arabic
      lookup AyahAlternates;
        language dflt;  # Default
} salt ;


#--- Positioning

feature mark {  # Mark to base Positioning
    # Same for latin & arabic:
        lookup mark_to_base;
        lookup alef_to_base;
    script arab;  # Arabic
####        lookup AlefMark2BelowAfterLam;
####        lookup MarkKern;
      # Force other languages to include Arabic script lookups
      language KUR  ;
      language SND  ;
      language URD  ;
      language WLF  ;
} mark ;

#feature mark {  # Mark Positioning
#    script arab;  # Arabic
#        language dflt;  # Default
#            lookup Marks;
#            lookup MarksBelowTailDown;
#            lookup MarksBelowTailUp;
#            lookup AlefMark2BelowAfterLam;
#        language KUR  exclude_dflt;  # Kurdish
#            lookup Marks;
#            lookup MarksBelowTailDown;
#            lookup MarksBelowTailUp;
#            lookup AlefMark2BelowAfterLam;
#        language SND  exclude_dflt;  # Sindhi
#            lookup Marks;
#            lookup MarksBelowTailDown;
#            lookup MarksBelowTailUp;
#            lookup AlefMark2BelowAfterLam;
#        language URD  exclude_dflt;  # Urdu
#            lookup Marks;
#            lookup MarksBelowTailDown;
#            lookup MarksBelowTailUp;
#            lookup AlefMark2BelowAfterLam;
#    script latn;  # Latin
#        language dflt;  # Default
#            lookup Marks;
#            lookup AlefMark2BelowAfterLam;
#} mark ;

feature mkmk {  # Mark to mark Positioning
    # Same for latin & arabic:
        lookup mark_to_mark_above;
        lookup mark_to_mark_below;
} mkmk ;


#feature mkmk {  # Mark to Mark Positioning
#    script arab;  # Arabic
#        language dflt;  # Default
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#        language KUR  exclude_dflt;  # Kurdish
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#        language SND  exclude_dflt;  # Sindhi
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#        language URD  exclude_dflt;  # Urdu
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#    script latn;  # Latin
#        language dflt;  # Default
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#} mkmk ;


feature curs {  # Cursive Positioning
    script arab;  # Arabic
      lookup LamAlefConnection;
} curs ;


feature kern {  # Kerning
    # Same for latin & arabic:
        lookup SubtendingMarks;
} kern ;

####feature kern {  # Kerning
####    script arab;  # Arabic
####        language dflt;  # Default
####            lookup Reh;
####            lookup SubtendingAyah;
####            lookup Subtending0600;
####            lookup Subtending0601;
####            lookup Subtending0602;
####            lookup Subtending0603;
####            lookup Subtending0604;
####            lookup Subtending0605;
####        language KUR  exclude_dflt;  # Kurdish
####            lookup Reh;
####            lookup Marks;
####            lookup SubtendingAyah;
####            lookup Subtending0600;
####            lookup Subtending0601;
####            lookup Subtending0602;
####            lookup Subtending0603;
####            lookup Subtending0604;
####            lookup Subtending0605;
####        language SND  exclude_dflt;  # Sindhi
####            ...
####        language URD  exclude_dflt;  # Urdu
####            ...
####    script latn;  # Latin
####        language dflt;  # Default
####            lookup SubtendingAyah;
####            ...
####} kern ;

